import Product from '../models/product_model.js';
import Order from '../models/order_model.js';
import Category from '../models/category_model.js';
import { generateInvoiceContent, sendEmail } from '../utils/invoice_utils.js';

const ChatbotController = {
    handleWebhook: async (req, res) => {
        try {
            const intentName = req.body.queryResult.intent.displayName;
            const parameters = req.body.queryResult.parameters;

            console.log(`Intent detected: ${intentName}`);
            console.log('Parameters:', parameters);

            // Kh·ªüi t·∫°o session n·∫øu ch∆∞a c√≥
            req.session = req.session || {};

            switch (intentName) {
                case 'Default Welcome Intent':
                    return handleWelcome(req, res);
                case 'product_consulting':
                    return await handleProductConsultation(parameters, req, res);
                case 'product_by_category':
                    return await handleProductByCategory(parameters, req, res);
                case 'product_by_price':
                    return await handleProductByPrice(parameters, req, res);
                case 'product_by_brand':
                    return await handleProductByBrand(parameters, req, res);
                case 'select_product':
                    return await handleProductSelection(parameters, req, res);
                case 'select_filtered_product':
                    return await handleFilteredProductSelection(parameters, req, res);
                case 'select_product_size':
                    return await handleProductSize(parameters, req, res);
                case 'select_product_color':
                    return await handleProductColor(parameters, req, res);
                case 'select_product_quantity':
                    return await handleProductQuantity(parameters, req, res);
                case 'collect_delivery_information':
                    return await handleDeliveryInformation(parameters, req, res);
                case 'select_payment_method':
                    return await handlePaymentMethod(parameters, req, res);
                case 'confirm_order':
                    return await handleOrderConfirmation(parameters, req, res);
                case 'provide_late_email':
                    return await handleLateEmail(parameters, req, res);
                default:
                    return handleDefaultResponse(req, res);
            }
        } catch (error) {
            console.error('Webhook error:', error);
            return handleError(res);
        }
    }
};

// X·ª≠ l√Ω ch√†o m·ª´ng
function handleWelcome(req, res) {
    return res.json({
        fulfillmentText:
            'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng gi√†y.\n' +
            'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n' +
            '1. T∆∞ v·∫•n s·∫£n ph·∫©m\n' +
            '2. T√¨m gi√†y theo danh m·ª•c\n' +
            '3. T√¨m gi√†y theo gi√°\n' +
            '4. T√¨m gi√†y theo th∆∞∆°ng hi·ªáu\n' +
            'B·∫°n c·∫ßn gi√∫p ƒë·ª° g√¨ ·∫°?'
    });
}

// X·ª≠ l√Ω t∆∞ v·∫•n s·∫£n ph·∫©m
async function handleProductConsultation(parameters, req, res) {
    const { category, price, discount, brand, style, purpose } = parameters;

    console.log('Product consulting parameters:', { category, price, discount, brand, style, purpose });

    let query = {};
    let suggestions = [];

    if (brand) {
        query.brand = { $regex: brand, $options: 'i' };
        suggestions.push(`th∆∞∆°ng hi·ªáu ${brand}`);
    }

    if (category) {
        const categoryExists = await Category.findOne({ name: { $regex: category, $options: 'i' } });
        if (!categoryExists) {
            const categories = await Category.find({}, 'name');
            const categoryList = categories.map(c => c.name).join(', ');
            return res.json({
                fulfillmentText: `Danh m·ª•c "${category}" kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn m·ªôt trong c√°c danh m·ª•c sau: ${categoryList}`
            });
        }
        query.category = categoryExists._id;
        suggestions.push(`danh m·ª•c ${categoryExists.name}`);
    }

    if (price) {
        const priceRange = await handlePriceRange(price);
        if (priceRange.error) {
            return res.json({ fulfillmentText: priceRange.error });
        }
        query.price = priceRange.query;
        suggestions.push(priceRange.description);
    }

    if (discount) {
        if (['c√≥', 'yes', 'ƒëang sale'].includes(discount.toLowerCase())) {
            query.discount = { $exists: true, $ne: null };
            suggestions.push('ƒëang gi·∫£m gi√°');
        }
    }

    if (purpose) {
        const purposeKeywords = {
            'ch·∫°y b·ªô': ['Running', 'ch·∫°y b·ªô', 'th·ªÉ thao'],
            'ƒëi ch∆°i': ['Casual', 'ƒëi ch∆°i', 'th·ªùi trang'],
            'ƒëi l√†m': ['Formal', 'c√¥ng s·ªü', 'l·ªãch s·ª±']
        };

        const keywords = purposeKeywords[purpose.toLowerCase()] || [];
        if (keywords.length > 0) {
            query.$or = [
                { 'category.name': { $in: keywords.map(k => new RegExp(k, 'i')) } },
                { description: { $in: keywords.map(k => new RegExp(k, 'i')) } }
            ];
            suggestions.push(`ph√π h·ª£p ƒë·ªÉ ${purpose}`);
        }
    }

    console.log('Final query:', JSON.stringify(query, null, 2));

    const products = await Product.find(query)
        .populate('category')
        .populate('discount')
        .limit(5);

    if (products.length > 0) {
        const outputContexts = [{
            name: `${req.body.session}/contexts/product_list_context`,
            lifespanCount: 5,
            parameters: {
                products: products,
                searchCriteria: suggestions.join(', ')
            }
        }];

        const productList = products.map((p, index) => {
            const discountedPrice = p.discount
                ? p.price * (1 - p.discount.amount / 100)
                : p.price;
            return `${index + 1}. ${p.name}\n` +
                `   üí∞ Gi√°: ${p.price.toLocaleString('vi-VN')} VND\n` +
                (p.discount ? `   üè∑Ô∏è Gi·∫£m gi√°: ${p.discount.amount}% c√≤n ${discountedPrice.toLocaleString('vi-VN')} VND\n` : '') +
                `   üìè Size: ${p.sizes.join(', ')}\n` +
                `   üé® M√†u s·∫Øc: ${p.colors.join(', ')}`;
        }).join('\n\n');

        const searchCriteria = suggestions.length > 0
            ? `\nT√¨m theo: ${suggestions.join(', ')}`
            : '';

        return res.json({
            fulfillmentText:
                `T√¥i ƒë√£ t√¨m th·∫•y ${products.length} s·∫£n ph·∫©m ph√π h·ª£p:${searchCriteria}\n\n${productList}\n\n` +
                `B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o? H√£y n√≥i "ch·ªçn s·ªë [1-${products.length}]" ho·∫∑c "ch·ªçn [t√™n s·∫£n ph·∫©m]"`,
            outputContexts: outputContexts
        });
    }

    return res.json({
        fulfillmentText:
            'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.\n' +
            'B·∫°n c√≥ th·ªÉ th·ª≠:\n' +
            '1. T√¨m v·ªõi ti√™u ch√≠ kh√°c\n' +
            '2. Xem t·∫•t c·∫£ s·∫£n ph·∫©m trong danh m·ª•c\n' +
            '3. ƒêi·ªÅu ch·ªânh kho·∫£ng gi√°\n' +
            'B·∫°n mu·ªën th·ª≠ c√°ch n√†o?'
    });
}

// X·ª≠ l√Ω t√¨m s·∫£n ph·∫©m theo danh m·ª•c
async function handleProductByCategory(parameters, req, res) {
    const { category } = parameters;

    try {
        const categoryDoc = await Category.findOne({ name: { $regex: category, $options: 'i' } });

        if (!categoryDoc) {
            const categories = await Category.find({}, 'name');
            const categoryList = categories.map(c => c.name).join(', ');
            return res.json({
                fulfillmentText: `Danh m·ª•c "${category}" kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn m·ªôt trong c√°c danh m·ª•c sau: ${categoryList}`
            });
        }

        const products = await Product.find({ category: categoryDoc._id })
            .populate('category')
            .populate('discount')
            .limit(5);

        if (products.length > 0) {
            const productList = products.map((p, index) => {
                const discountedPrice = p.discount
                    ? p.price * (1 - p.discount.amount / 100)
                    : p.price;
                return `${index + 1}. ${p.name}\n` +
                    `   üí∞ Gi√°: ${p.price.toLocaleString('vi-VN')} VND\n` +
                    (p.discount ? `   üè∑Ô∏è Gi·∫£m gi√°: ${p.discount.amount}% c√≤n ${discountedPrice.toLocaleString('vi-VN')} VND\n` : '') +
                    `   üìè Size: ${p.sizes.join(', ')}\n` +
                    `   üé® M√†u s·∫Øc: ${p.colors.join(', ')}`;
            }).join('\n\n');

            const outputContexts = [{
                name: `${req.body.session}/contexts/product_list_context`,
                lifespanCount: 5,
                parameters: {
                    products: products,
                    searchCriteria: `danh m·ª•c ${categoryDoc.name}`
                }
            }];

            return res.json({
                fulfillmentText:
                    `T√¥i ƒë√£ t√¨m th·∫•y ${products.length} s·∫£n ph·∫©m trong danh m·ª•c ${categoryDoc.name}:\n\n${productList}\n\n` +
                    `B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o? H√£y n√≥i "ch·ªçn s·ªë [1-${products.length}]" ho·∫∑c "ch·ªçn [t√™n s·∫£n ph·∫©m]"`,
                outputContexts: outputContexts
            });
        }

        return res.json({
            fulfillmentText: `Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c ${categoryDoc.name}. B·∫°n c√≥ mu·ªën xem c√°c danh m·ª•c kh√°c kh√¥ng?`
        });

    } catch (error) {
        console.error('Category search error:', error);
        return res.json({
            fulfillmentText: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm s·∫£n ph·∫©m theo danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
}

// X·ª≠ l√Ω t√¨m s·∫£n ph·∫©m theo gi√°
async function handleProductByPrice(parameters, req, res) {
    try {
        const { number, price_range, unit } = parameters;

        console.log('Price parameters:', { number, price_range, unit });

        if (parameters.price) {
            const priceRange = await handlePriceRange(parameters.price);
            if (priceRange.error) {
                return res.json({ fulfillmentText: priceRange.error });
            }

            const products = await Product.find({ price: priceRange.query })
                .populate('category')
                .populate('discount')
                .limit(5);

            return handleProductResults(products, priceRange.description, req, res);
        }

        if (number && price_range) {
            const numValue = Array.isArray(number) ? number[0] : number;
            const rangeType = Array.isArray(price_range) ? price_range[0] : price_range;
            const unitValue = Array.isArray(unit) ? unit[0] : unit;

            if (!numValue) {
                return res.json({ fulfillmentText: 'Vui l√≤ng cung c·∫•p gi√° c·ª• th·ªÉ.' });
            }

            let query = {};
            let description = '';
            let value = parseFloat(numValue);

            let multiplier = 1;
            if (unitValue) {
                switch (unitValue.toLowerCase()) {
                    case 'tri·ªáu':
                    case 'tr':
                        multiplier = 1000000;
                        break;
                    case 'k':
                    case 'ngh√¨n':
                        multiplier = 1000;
                        break;
                }
            }

            value = value * multiplier;

            if (rangeType === 'under_price') {
                query = { price: { $lte: value } };
                description = `d∆∞·ªõi ${numValue} ${unitValue || 'VND'}`;
            } else if (rangeType === 'above_price') {
                query = { price: { $gte: value } };
                description = `tr√™n ${numValue} ${unitValue || 'VND'}`;
            } else if (rangeType === 'between_price' && Array.isArray(number) && number.length >= 2) {
                const value2 = parseFloat(number[1]) * multiplier;
                query = { price: { $gte: value, $lte: value2 } };
                description = `t·ª´ ${number[0]} ƒë·∫øn ${number[1]} ${unitValue || 'VND'}`;
            } else {
                query = { price: value };
                description = `${numValue} ${unitValue || 'VND'}`;
            }

            console.log('Price query:', query);

            const products = await Product.find(query)
                .populate('category')
                .populate('discount')
                .limit(5);

            return handleProductResults(products, description, req, res);
        }

        return res.json({
            fulfillmentText: 'Vui l√≤ng cung c·∫•p th√¥ng tin gi√° c·ª• th·ªÉ ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m. V√≠ d·ª•: "d∆∞·ªõi 2 tri·ªáu", "t·ª´ 500k ƒë·∫øn 1 tri·ªáu".'
        });
    } catch (error) {
        console.error('Price search error:', error);
        return handleError(res);
    }
}

// X·ª≠ l√Ω kho·∫£ng gi√°
async function handlePriceRange(priceInput) {
    if (!priceInput) {
        return {
            error: 'Vui l√≤ng cung c·∫•p th√¥ng tin gi√° ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m.'
        };
    }

    if (Array.isArray(priceInput)) {
        priceInput = priceInput[0].toString();
    } else if (typeof priceInput !== 'string') {
        priceInput = priceInput.toString();
    }

    const priceText = priceInput.toLowerCase();
    let query = {};
    let description = '';

    const patterns = {
        exact: /^gi√°\s*(\d+)\s*(tri·ªáu|tr|k|ngh√¨n)?$/i,
        under: /^d∆∞·ªõi\s*(\d+)\s*(tri·ªáu|tr|k|ngh√¨n)?$/i,
        above: /^tr√™n\s*(\d+)\s*(tri·ªáu|tr|k|ngh√¨n)?$/i,
        between: /^t·ª´\s*(\d+)\s*ƒë·∫øn\s*(\d+)\s*(tri·ªáu|tr|k|ngh√¨n)?$/i
    };

    const multipliers = {
        'tri·ªáu': 1000000,
        'tr': 1000000,
        'k': 1000,
        'ngh√¨n': 1000
    };

    for (const [type, pattern] of Object.entries(patterns)) {
        const match = priceText.match(pattern);
        if (match) {
            const value1 = parseInt(match[1]);
            const unit = match[2]?.toLowerCase() || '';
            const multiplier = multipliers[unit] || 1;

            switch (type) {
                case 'exact':
                    query = { $eq: value1 * multiplier };
                    description = `gi√° ${value1} ${unit || 'VND'}`;
                    break;
                case 'under':
                    query = { $lte: value1 * multiplier };
                    description = `d∆∞·ªõi ${value1} ${unit || 'VND'}`;
                    break;
                case 'above':
                    query = { $gte: value1 * multiplier };
                    description = `tr√™n ${value1} ${unit || 'VND'}`;
                    break;
                case 'between':
                    const value2 = parseInt(match[2]);
                    query = {
                        $gte: value1 * multiplier,
                        $lte: value2 * multiplier
                    };
                    description = `t·ª´ ${value1} ƒë·∫øn ${value2} ${unit || 'VND'}`;
                    break;
            }
            break;
        }
    }

    if (Object.keys(query).length === 0) {
        return {
            error: 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu kho·∫£ng gi√° b·∫°n mu·ªën. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√°c c√°ch n√≥i nh∆∞:\n' +
                '- "gi√° 2 tri·ªáu"\n' +
                '- "d∆∞·ªõi 1 tri·ªáu"\n' +
                '- "tr√™n 500k"\n' +
                '- "t·ª´ 1 ƒë·∫øn 3 tri·ªáu"'
        };
    }

    return { query, description };
}

// X·ª≠ l√Ω ch·ªçn s·∫£n ph·∫©m - C·∫£i ti·∫øn ƒë·ªÉ h·ªó tr·ª£ ch·ªçn nhi·ªÅu s·∫£n ph·∫©m v√† nh·∫≠n di·ªán ƒë·∫ßu v√†o ƒë∆°n gi·∫£n
async function handleProductSelection(parameters, req, res) {
    const { product_name, product_number } = parameters;
    const rawInput = req.body.queryResult.queryText;

    console.log('Product selection parameters:', { product_name, product_number });
    console.log('Raw input:', rawInput);
    console.log('Output contexts:', req.body.queryResult.outputContexts);

    const productListContext = req.body.queryResult.outputContexts.find(
        context => context.name.includes('product_list_context')
    );

    if (!productListContext) {
        return res.json({
            fulfillmentText: 'Kh√¥ng t√¨m th·∫•y danh s√°ch s·∫£n ph·∫©m. Vui l√≤ng t√¨m ki·∫øm s·∫£n ph·∫©m tr∆∞·ªõc.'
        });
    }

    let products = productListContext.parameters.products || [];

    if (products.length === 0) {
        return res.json({
            fulfillmentText: 'Danh s√°ch s·∫£n ph·∫©m tr·ªëng. Vui l√≤ng t√¨m ki·∫øm s·∫£n ph·∫©m tr∆∞·ªõc.'
        });
    }

    // M·∫£ng ch·ª©a c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
    let selectedProducts = [];

    // Pattern ƒë·ªÉ nh·∫≠n d·∫°ng c√°c s·ªë trong chu·ªói ƒë·∫ßu v√†o
    // C√≥ th·ªÉ ph√°t hi·ªán "ch·ªçn 1, 2, 3" ho·∫∑c "1 2 3" ho·∫∑c "1,2,3" ho·∫∑c "1 v√† 2" ho·∫∑c ƒë∆°n gi·∫£n l√† "1" 
    const numberPattern = /\b(\d+)\b/g;
    const numbers = rawInput.match(numberPattern);

    // Ki·ªÉm tra n·∫øu ƒë·∫ßu v√†o ch·ªâ l√† s·ªë ƒë∆°n (v√≠ d·ª•: "1", "2", v.v.)
    if (!product_name && !product_number && numbers && numbers.length > 0) {
        for (const num of numbers) {
            const index = parseInt(num) - 1;
            if (index >= 0 && index < products.length) {
                selectedProducts.push(products[index]);
            }
        }
    }
    // Ki·ªÉm tra xem c√≥ t√™n s·∫£n ph·∫©m kh√¥ng
    else if (product_name) {
        // T√°ch t√™n s·∫£n ph·∫©m n·∫øu c√≥ nhi·ªÅu t√™n ƒë∆∞·ª£c ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y ho·∫∑c "v√†"
        const productNames = product_name.split(/,|\s+v√†\s+|\s+or\s+/).map(name => name.trim());

        for (const name of productNames) {
            const matchedProduct = products.find(p =>
                p.name && p.name.toLowerCase().includes(name.toLowerCase())
            );
            if (matchedProduct) {
                selectedProducts.push(matchedProduct);
            }
        }
    }
    // X·ª≠ l√Ω khi c√≥ product_number (s·ªë th·ª© t·ª±)
    else if (product_number) {
        if (Array.isArray(product_number)) {
            // ƒê√£ x·ª≠ l√Ω nhi·ªÅu s·ªë trong m·∫£ng parameters
            for (const num of product_number) {
                const index = parseInt(num) - 1;
                if (index >= 0 && index < products.length) {
                    selectedProducts.push(products[index]);
                }
            }
        } else {
            // Ch·ªâ c√≥ m·ªôt s·ªë 
            const index = parseInt(product_number) - 1;
            if (index >= 0 && index < products.length) {
                selectedProducts.push(products[index]);
            }
        }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o
    if (selectedProducts.length === 0) {
        return res.json({
            fulfillmentText: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m b·∫°n ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i v·ªõi s·ªë th·ª© t·ª± t·ª´ 1-${products.length} ho·∫∑c t√™n s·∫£n ph·∫©m.`
        });
    }

    // N·∫øu ch·ªâ ch·ªçn 1 s·∫£n ph·∫©m, x·ª≠ l√Ω nh∆∞ tr∆∞·ªõc
    if (selectedProducts.length === 1) {
        const product = selectedProducts[0];
        const formattedPrice = product.price ? product.price.toLocaleString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t';
        const discountedPrice = product.discount && product.price
            ? (product.price * (1 - product.discount.amount / 100)).toLocaleString('vi-VN')
            : null;

        const productDetails = [
            `üè∑Ô∏è T√™n s·∫£n ph·∫©m: ${product.name || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
            `üí∞ Gi√°: ${formattedPrice} VND`,
            product.discount ? `üè∑Ô∏è Gi·∫£m gi√°: ${product.discount.amount}%` : '',
            product.discount ? `üíµ Gi√° sau gi·∫£m: ${discountedPrice} VND` : '',
            `üëü Th∆∞∆°ng hi·ªáu: ${product.brand || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
            `üìè K√≠ch th∆∞·ªõc c√≥ s·∫µn: ${product.sizes?.join(', ') || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
            `üé® M√†u s·∫Øc c√≥ s·∫µn: ${product.colors?.join(', ') || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
            `üì¶ S·ªë l∆∞·ª£ng trong kho: ${product.stockQuantity || 0}`,
            `üè∑Ô∏è Danh m·ª•c: ${product.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}`,
            `üõ†Ô∏è Ch·∫•t li·ªáu: ${product.material || 'Ch∆∞a c·∫≠p nh·∫≠t'}`
        ].filter(Boolean).join('\n');

        req.session.selectedProduct = {
            id: product._id,
            name: product.name,
            price: product.price,
            availableSizes: product.sizes || [],
            availableColors: product.colors || [],
            discount: product.discount,
            stockQuantity: product.stockQuantity
        };

        const outputContexts = [{
            name: `${req.body.session}/contexts/selected_product_context`,
            lifespanCount: 5,
            parameters: {
                selectedProduct: req.session.selectedProduct
            }
        }];

        return res.json({
            fulfillmentText: `${productDetails}\n\nüëâ Vui l√≤ng cho t√¥i bi·∫øt:\n- K√≠ch th∆∞·ªõc b·∫°n mu·ªën ch·ªçn\n- S·ªë l∆∞·ª£ng b·∫°n mu·ªën mua\n- M√†u s·∫Øc b·∫°n th√≠ch\n\nV√≠ d·ª•: "Size 41, s·ªë l∆∞·ª£ng 2, m√†u xanh"`,
            outputContexts: outputContexts
        });
    }
    // N·∫øu ch·ªçn nhi·ªÅu s·∫£n ph·∫©m, hi·ªÉn th·ªã danh s√°ch v√† y√™u c·∫ßu ch·ªçn 1
    else {
        // Hi·ªÉn th·ªã danh s√°ch c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
        const selectedProductList = selectedProducts.map((p, index) => {
            const discountedPrice = p.discount
                ? p.price * (1 - p.discount.amount / 100)
                : p.price;
            return `${index + 1}. ${p.name}\n` +
                `   üí∞ Gi√°: ${p.price.toLocaleString('vi-VN')} VND\n` +
                (p.discount ? `   üè∑Ô∏è Gi·∫£m gi√°: ${p.discount.amount}% c√≤n ${discountedPrice.toLocaleString('vi-VN')} VND\n` : '');
        }).join('\n\n');

        // L∆∞u danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc v√†o context m·ªõi
        const outputContexts = [{
            name: `${req.body.session}/contexts/filtered_products_context`,
            lifespanCount: 5,
            parameters: {
                filteredProducts: selectedProducts
            }
        }];

        return res.json({
            fulfillmentText:
                `B·∫°n ƒë√£ ch·ªçn ${selectedProducts.length} s·∫£n ph·∫©m:\n\n${selectedProductList}\n\n` +
                `Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt v√† ti·∫øp t·ª•c. H√£y n√≥i "Xem chi ti·∫øt s·∫£n ph·∫©m s·ªë [1-${selectedProducts.length}]"`,
            outputContexts: outputContexts
        });
    }
}

// Th√™m h√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω vi·ªác ch·ªçn t·ª´ danh s√°ch ƒë√£ l·ªçc
async function handleFilteredProductSelection(parameters, req, res) {
    const { product_number } = parameters;
    const rawInput = req.body.queryResult.queryText;

    console.log('Filtered product selection parameters:', { product_number });
    console.log('Raw input:', rawInput);

    // L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc t·ª´ context
    const filteredProductsContext = req.body.queryResult.outputContexts.find(
        context => context.name.includes('filtered_products_context')
    );

    if (!filteredProductsContext || !filteredProductsContext.parameters.filteredProducts) {
        return res.json({
            fulfillmentText: 'Kh√¥ng t√¨m th·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc. Vui l√≤ng t√¨m ki·∫øm s·∫£n ph·∫©m l·∫°i.'
        });
    }

    const filteredProducts = filteredProductsContext.parameters.filteredProducts;

    // Pattern ƒë·ªÉ nh·∫≠n d·∫°ng s·ªë t·ª´ chu·ªói ƒë·∫ßu v√†o
    const numberPattern = /\b(\d+)\b/g;
    const numbers = rawInput.match(numberPattern);

    let index = -1;

    // ∆Øu ti√™n l·∫•y t·ª´ tham s·ªë product_number
    if (product_number) {
        index = parseInt(product_number) - 1;
    }
    // Sau ƒë√≥ th·ª≠ nh·∫≠n d·∫°ng s·ªë t·ª´ chu·ªói ƒë·∫ßu v√†o
    else if (numbers && numbers.length > 0) {
        index = parseInt(numbers[0]) - 1;
    }

    if (index < 0 || index >= filteredProducts.length) {
        return res.json({
            fulfillmentText: `S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn ${filteredProducts.length}.`
        });
    }

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë√£ ch·ªçn
    const product = filteredProducts[index];

    const formattedPrice = product.price ? product.price.toLocaleString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t';
    const discountedPrice = product.discount && product.price
        ? (product.price * (1 - product.discount.amount / 100)).toLocaleString('vi-VN')
        : null;

    const productDetails = [
        `üè∑Ô∏è T√™n s·∫£n ph·∫©m: ${product.name || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
        `üí∞ Gi√°: ${formattedPrice} VND`,
        product.discount ? `üè∑Ô∏è Gi·∫£m gi√°: ${product.discount.amount}%` : '',
        product.discount ? `üíµ Gi√° sau gi·∫£m: ${discountedPrice} VND` : '',
        `üëü Th∆∞∆°ng hi·ªáu: ${product.brand || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
        `üìè K√≠ch th∆∞·ªõc c√≥ s·∫µn: ${product.sizes?.join(', ') || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
        `üé® M√†u s·∫Øc c√≥ s·∫µn: ${product.colors?.join(', ') || 'Ch∆∞a c·∫≠p nh·∫≠t'}`,
        `üì¶ S·ªë l∆∞·ª£ng trong kho: ${product.stockQuantity || 0}`,
        `üè∑Ô∏è Danh m·ª•c: ${product.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}`,
        `üõ†Ô∏è Ch·∫•t li·ªáu: ${product.material || 'Ch∆∞a c·∫≠p nh·∫≠t'}`
    ].filter(Boolean).join('\n');

    req.session.selectedProduct = {
        id: product._id,
        name: product.name,
        price: product.price,
        availableSizes: product.sizes || [],
        availableColors: product.colors || [],
        discount: product.discount,
        stockQuantity: product.stockQuantity
    };

    const outputContexts = [{
        name: `${req.body.session}/contexts/selected_product_context`,
        lifespanCount: 5,
        parameters: {
            selectedProduct: req.session.selectedProduct
        }
    }];

    return res.json({
        fulfillmentText: `${productDetails}\n\nüëâ Vui l√≤ng cho t√¥i bi·∫øt:\n- K√≠ch th∆∞·ªõc b·∫°n mu·ªën ch·ªçn\n- S·ªë l∆∞·ª£ng b·∫°n mu·ªën mua\n- M√†u s·∫Øc b·∫°n th√≠ch\n\nV√≠ d·ª•: "Size 41, s·ªë l∆∞·ª£ng 2, m√†u xanh"`,
        outputContexts: outputContexts
    });
}

// X·ª≠ l√Ω ch·ªçn k√≠ch th∆∞·ªõc
async function handleProductSize(parameters, req, res) {
    const { size } = parameters;
    const selectedProductContext = req.body.queryResult.outputContexts.find(
        context => context.name.endsWith('selected_product_context')
    );

    if (!selectedProductContext || !selectedProductContext.parameters.selectedProduct) {
        return res.json({
            fulfillmentText: 'B·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o. Vui l√≤ng ch·ªçn s·∫£n ph·∫©m tr∆∞·ªõc.'
        });
    }

    const product = selectedProductContext.parameters.selectedProduct;
    if (!product.availableSizes.includes(parseInt(size))) {
        return res.json({
            fulfillmentText: `Size ${size} kh√¥ng c√≥ s·∫µn. C√°c size hi·ªán c√≥: ${product.availableSizes.join(', ')}`
        });
    }

    const outputContexts = [{
        name: `${req.body.session}/contexts/product_size_context`,
        lifespanCount: 5,
        parameters: {
            selectedSize: parseInt(size)
        }
    }];

    return res.json({
        fulfillmentText: `ƒê√£ ch·ªçn size ${size}. Vui l√≤ng ch·ªçn m√†u s·∫Øc.`,
        outputContexts: outputContexts
    });
}

// X·ª≠ l√Ω ch·ªçn m√†u s·∫Øc
async function handleProductColor(parameters, req, res) {
    const { color } = parameters;
    const selectedProductContext = req.body.queryResult.outputContexts.find(
        context => context.name.endsWith('selected_product_context')
    );

    if (!selectedProductContext || !selectedProductContext.parameters.selectedProduct) {
        return res.json({
            fulfillmentText: 'B·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o. Vui l√≤ng ch·ªçn s·∫£n ph·∫©m tr∆∞·ªõc.'
        });
    }

    const product = selectedProductContext.parameters.selectedProduct;
    if (!product.availableColors.includes(color)) {
        return res.json({
            fulfillmentText: `M√†u ${color} kh√¥ng c√≥ s·∫µn. C√°c m√†u hi·ªán c√≥: ${product.availableColors.join(', ')}`
        });
    }

    const outputContexts = [{
        name: `${req.body.session}/contexts/product_color_context`,
        lifespanCount: 5,
        parameters: {
            selectedColor: color
        }
    }];

    return res.json({
        fulfillmentText: `ƒê√£ ch·ªçn m√†u ${color}. Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng.`,
        outputContexts: outputContexts
    });
}

// X·ª≠ l√Ω ch·ªçn s·ªë l∆∞·ª£ng
async function handleProductQuantity(parameters, req, res) {
    const { quantity } = parameters;
    const selectedProductContext = req.body.queryResult.outputContexts.find(
        context => context.name.endsWith('selected_product_context')
    );

    if (!selectedProductContext || !selectedProductContext.parameters.selectedProduct) {
        return res.json({
            fulfillmentText: 'B·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o. Vui l√≤ng ch·ªçn s·∫£n ph·∫©m tr∆∞·ªõc.'
        });
    }

    const product = selectedProductContext.parameters.selectedProduct;
    const parsedQuantity = parseInt(quantity);

    if (isNaN(parsedQuantity) || parsedQuantity <= 0) {
        return res.json({
            fulfillmentText: 'S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng l·ªõn h∆°n 0.'
        });
    }

    if (parsedQuantity > product.stockQuantity) {
        return res.json({
            fulfillmentText: `Xin l·ªói, hi·ªán ch·ªâ c√≤n ${product.stockQuantity} s·∫£n ph·∫©m trong kho.`
        });
    }

    const outputContexts = [{
        name: `${req.body.session}/contexts/product_quantity_context`,
        lifespanCount: 5,
        parameters: {
            selectedQuantity: parsedQuantity
        }
    }];

    return res.json({
        fulfillmentText: `ƒê√£ ch·ªçn s·ªë l∆∞·ª£ng ${parsedQuantity}. Vui l√≤ng cung c·∫•p th√¥ng tin giao h√†ng.`,
        outputContexts: outputContexts
    });
}

// X·ª≠ l√Ω th√¥ng tin giao h√†ng
async function handleDeliveryInformation(parameters, req, res) {
    const { shippingAddress, phone, email, recipientName } = parameters;

    console.log('Delivery information parameters:', { shippingAddress, phone, email, recipientName });
    console.log('Current session:', req.session);

    const contexts = req.body.queryResult.outputContexts || [];
    const selectedProductContext = contexts.find(ctx => ctx.name.includes('selected_product_context'));
    const productSizeContext = contexts.find(ctx => ctx.name.includes('product_size_context'));
    const productColorContext = contexts.find(ctx => ctx.name.includes('product_color_context'));
    const productQuantityContext = contexts.find(ctx => ctx.name.includes('product_quantity_context'));
    const deliveryInfoContext = contexts.find(ctx => ctx.name.includes('delivery_info_context'));

    if (!req.session.order) {
        req.session.order = {};
    }

    if (deliveryInfoContext && deliveryInfoContext.parameters.order) {
        req.session.order = { ...deliveryInfoContext.parameters.order };
    }

    if (selectedProductContext && selectedProductContext.parameters.selectedProduct) {
        const product = selectedProductContext.parameters.selectedProduct;
        req.session.order.product = product.id;
        req.session.order.productName = product.name;
        req.session.order.price = product.price;
    }

    if (productSizeContext && productSizeContext.parameters.selectedSize) {
        req.session.order.size = productSizeContext.parameters.selectedSize;
    }

    if (productColorContext && productColorContext.parameters.selectedColor) {
        req.session.order.color = productColorContext.parameters.selectedColor;
    }

    if (productQuantityContext && productQuantityContext.parameters.selectedQuantity) {
        req.session.order.quantity = productQuantityContext.parameters.selectedQuantity;
    }

    if (shippingAddress) {
        req.session.order.shippingAddress = shippingAddress;
    } else {
        const rawInput = req.body.queryResult.queryText;
        if (rawInput && rawInput.toLowerCase().includes('ƒë·ªãa ch·ªâ')) {
            const addressMatch = rawInput.match(/ƒë·ªãa ch·ªâ[:\s]+(.+)/i);
            if (addressMatch && addressMatch[1]) {
                req.session.order.shippingAddress = addressMatch[1].trim();
            }
        }
    }

    if (phone && phone.length > 0) {
        req.session.order.phone = Array.isArray(phone) ? phone[0] : phone;
    }
    if (email) req.session.order.email = email;
    if (recipientName) req.session.order.recipientName = recipientName;

    console.log('Updated order in session:', req.session.order);

    if (!req.session.order.product || !req.session.order.size ||
        !req.session.order.color || !req.session.order.quantity) {
        const outputContexts = [{
            name: `${req.body.session}/contexts/delivery_info_context`,
            lifespanCount: 5,
            parameters: {
                order: req.session.order,
                incomplete: true
            }
        }];

        return res.json({
            fulfillmentText: 'D·ªØ li·ªáu ƒë√£ b·ªã m·∫•t. Vui l√≤ng quay l·∫°i b∆∞·ªõc ch·ªçn s·∫£n ph·∫©m v√† ti·∫øn h√†nh mua h√†ng l·∫°i!',
            outputContexts: outputContexts
        });
    }

    let missingInfo = [];
    if (!req.session.order.shippingAddress) missingInfo.push('ƒë·ªãa ch·ªâ giao h√†ng');
    if (!req.session.order.phone) missingInfo.push('s·ªë ƒëi·ªán tho·∫°i');
    if (!req.session.order.recipientName) missingInfo.push('t√™n ng∆∞·ªùi nh·∫≠n');

    const outputContexts = [{
        name: `${req.body.session}/contexts/delivery_info_context`,
        lifespanCount: 5,
        parameters: {
            order: req.session.order
        }
    }];

    if (missingInfo.length === 0) {
        return res.json({
            fulfillmentText: `Th√¥ng tin giao h√†ng ƒë√£ ƒë·∫ßy ƒë·ªß. B·∫°n mu·ªën thanh to√°n b·∫±ng ph∆∞∆°ng th·ª©c n√†o? (COD, th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n)`,
            outputContexts: outputContexts
        });
    }

    return res.json({
        fulfillmentText: `Vui l√≤ng cung c·∫•p th√™m: ${missingInfo.join(', ')}.`,
        outputContexts: outputContexts
    });
}

// X·ª≠ l√Ω ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
// Trong file ChatbotController.js

// X·ª≠ l√Ω ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
async function handlePaymentMethod(parameters, req, res) {
    const { payment_method } = parameters;

    console.log('Payment method parameter:', payment_method);
    console.log('Current session:', req.session);

    const contexts = req.body.queryResult.outputContexts || [];
    const deliveryInfoContext = contexts.find(ctx => ctx.name.includes('delivery_info_context'));
    const selectedProductContext = contexts.find(ctx => ctx.name.includes('selected_product_context'));
    const productSizeContext = contexts.find(ctx => ctx.name.includes('product_size_context'));
    const productColorContext = contexts.find(ctx => ctx.name.includes('product_color_context'));

    if (!req.session.order) {
        req.session.order = {};
    }

    if (deliveryInfoContext && deliveryInfoContext.parameters.order) {
        req.session.order = { ...deliveryInfoContext.parameters.order };
    }
    if (selectedProductContext && selectedProductContext.parameters.selectedProduct) {
        const product = selectedProductContext.parameters.selectedProduct;
        req.session.order.product = product.id;
        req.session.order.productName = product.name;
        req.session.order.price = product.price;
    }
    if (productSizeContext && productSizeContext.parameters.selectedSize) {
        req.session.order.size = productSizeContext.parameters.selectedSize;
    }
    if (productColorContext && productColorContext.parameters.selectedColor) {
        req.session.order.color = productColorContext.parameters.selectedColor;
    }

    if (!req.session.order.product) {
        return res.json({
            fulfillmentText: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i t·ª´ b∆∞·ªõc ch·ªçn s·∫£n ph·∫©m!'
        });
    }

    let dbPaymentMethod = '';
    if (payment_method.toLowerCase().includes('cod') || payment_method.toLowerCase() === 'ti·ªÅn m·∫∑t' || payment_method.toLowerCase() === 'thanh to√°n khi nh·∫≠n h√†ng') {
        dbPaymentMethod = 'COD';
    } else if (payment_method.toLowerCase().includes('momo') || payment_method.toLowerCase() === 'v√≠ ƒëi·ªán t·ª≠') {
        dbPaymentMethod = 'MOMO';
    } else if (payment_method.toLowerCase().includes('chuy·ªÉn kho·∫£n') || payment_method.toLowerCase().includes('bank') || payment_method.toLowerCase().includes('th·∫ª t√≠n d·ª•ng') || payment_method.toLowerCase().includes('ng√¢n h√†ng')) {
        dbPaymentMethod = 'BANK';
    } else {
        return res.json({
            fulfillmentText: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn COD, MOMO ho·∫∑c chuy·ªÉn kho·∫£n ng√¢n h√†ng!'
        });
    }

    req.session.order.paymentMethod = dbPaymentMethod;
    req.session.order.originalPaymentMethod = payment_method;

    try {
        const product = await Product.findById(req.session.order.product);
        if (!product) {
            return res.json({
                fulfillmentText: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!'
            });
        }

        let productPrice = product.price;
        if (product.discount && product.discount.amount && !isNaN(product.discount.amount)) {
            productPrice = product.price * (1 - product.discount.amount / 100);
        }
        if (isNaN(productPrice)) productPrice = product.price;

        const quantity = parseInt(req.session.order.quantity) || 1;
        const totalAmount = productPrice * quantity;

        req.session.order.calculatedPrice = productPrice;
        req.session.order.totalAmount = totalAmount;

        // T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng v·ªõi size v√† color trong products
        const orderData = {
            user: "65ae3051ed28e2cc2cf25b8c",
            products: [{
                product: req.session.order.product,
                quantity: req.session.order.quantity,
                price: productPrice,
                size: req.session.order.size || 'Kh√¥ng x√°c ƒë·ªãnh', // L∆∞u size v√†o products
                color: req.session.order.color || 'Kh√¥ng x√°c ƒë·ªãnh' // L∆∞u color v√†o products
            }],
            shippingAddress: req.session.order.shippingAddress || 'Ch∆∞a cung c·∫•p',
            paymentMethod: dbPaymentMethod,
            totalAmount: totalAmount,
            status: 'Pending',
            email: req.session.order.email || '',
            phone: req.session.order.phone || '',
            recipientName: req.session.order.recipientName || ''
        };

        console.log('D·ªØ li·ªáu ƒë∆°n h√†ng tr∆∞·ªõc khi t·∫°o:', orderData);

        const order = await Order.create(orderData);
        console.log('ƒê∆°n h√†ng ƒë√£ t·∫°o:', order);

        req.session.order.orderId = order._id;

        const orderSummary = [
            'üìã TH√îNG TIN ƒê∆†N H√ÄNG C·ª¶A B·∫†N',
            '----------------------------------------',
            `üè∑Ô∏è S·∫£n ph·∫©m: ${product.name}`,
            `üìè K√≠ch th∆∞·ªõc: ${req.session.order.size || 'Ch∆∞a ch·ªçn'}`,
            `üé® M√†u s·∫Øc: ${req.session.order.color || 'Ch∆∞a ch·ªçn'}`,
            `üî¢ S·ªë l∆∞·ª£ng: ${quantity}`,
            `üí∞ ƒê∆°n gi√°: ${product.price.toLocaleString('vi-VN')} VND`,
            product.discount ? `üè∑Ô∏è Gi·∫£m gi√°: ${product.discount.amount}%` : '',
            `üíµ Th√†nh ti·ªÅn: ${totalAmount.toLocaleString('vi-VN')} VND`,
            '----------------------------------------',
            `üë§ Ng∆∞·ªùi nh·∫≠n: ${req.session.order.recipientName || 'Ch∆∞a cung c·∫•p'}`,
            `üì± S·ªë ƒëi·ªán tho·∫°i: ${req.session.order.phone || 'Ch∆∞a cung c·∫•p'}`,
            `‚úâÔ∏è Email: ${req.session.order.email || 'Ch∆∞a cung c·∫•p'}`,
            `üè† ƒê·ªãa ch·ªâ giao h√†ng: ${req.session.order.shippingAddress || 'Ch∆∞a cung c·∫•p'}`,
            `üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n: ${payment_method}`,
            '----------------------------------------',
        ].filter(Boolean).join('\n');

        const outputContexts = [{
            name: `${req.body.session}/contexts/order_confirmation_context`,
            lifespanCount: 5,
            parameters: {
                orderId: order._id,
                order: req.session.order
            }
        }];

        return res.json({
            fulfillmentText: `${orderSummary}\n\nVui l√≤ng x√°c nh·∫≠n th√¥ng tin ƒë∆°n h√†ng tr√™n. B·∫°n c√≥ mu·ªën nh·∫≠n h√≥a ƒë∆°n qua email kh√¥ng? (C√≥/Kh√¥ng)`,
            outputContexts: outputContexts
        });
    } catch (error) {
        console.error('Error in handlePaymentMethod:', error);
        return res.json({
            fulfillmentText: `‚ö†Ô∏è Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ƒë∆°n h√†ng: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£ qua 0382385129.`
        });
    }
}

// C·∫£i thi·ªán h√†m x·ª≠ l√Ω confirm_order ƒë·ªÉ t·∫°o ƒë∆°n h√†ng v√† g·ª≠i email
// X·ª≠ l√Ω x√°c nh·∫≠n ƒë∆°n h√†ng v√† g·ª≠i email
async function handleOrderConfirmation(parameters, req, res) {
    const { confirm_email } = parameters;

    console.log('Order confirmation parameters:', confirm_email);
    console.log('Current session:', req.session);

    // L·∫•y context x√°c nh·∫≠n ƒë∆°n h√†ng
    const orderConfirmationContext = req.body.queryResult.outputContexts.find(
        context => context.name.includes('order_confirmation_context')
    );

    // N·∫øu kh√¥ng c√≥ context, th·ª≠ l·∫•y t·ª´ session
    if (!orderConfirmationContext || !orderConfirmationContext.parameters.orderId) {
        if (!req.session.order || !req.session.order.orderId) {
            return res.json({
                fulfillmentText: 'Xin l·ªói, kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆°n h√†ng. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i t·ª´ b∆∞·ªõc ch·ªçn s·∫£n ph·∫©m ho·∫∑c li√™n h·ªá 0382385129.'
            });
        }
    }

    const orderId = orderConfirmationContext?.parameters.orderId || req.session.order.orderId;

    // Ph√¢n t√≠ch ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng
    const userResponse = (confirm_email || '').toLowerCase();
    const positiveResponses = ['c√≥', 'yes', 'ƒë·ªìng √Ω', 'ok', 'ƒë√∫ng', 'mu·ªën', 'g·ª≠i', 'email', 'e-mail', 'mail'];
    const negativeResponses = ['kh√¥ng', 'no', 'th√¥i', 'ƒë·ª´ng', 'kh·ªèi', 'ko', 'k', 'kh√¥ng c·∫ßn', 'kh√¥ng mu·ªën'];

    const wantsEmail = positiveResponses.some(word => userResponse.includes(word)) &&
        !negativeResponses.some(word => userResponse.includes(word));

    // Tr√≠ch xu·∫•t email t·ª´ c√¢u tr·∫£ l·ªùi n·∫øu c√≥
    let emailToUse = req.session.order?.email || '';
    const emailMatch = userResponse.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/);
    if (emailMatch) {
        emailToUse = emailMatch[0];
        console.log('Email m·ªõi t·ª´ c√¢u tr·∫£ l·ªùi:', emailToUse);
    }

    try {
        // L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ database
        const order = await Order.findById(orderId).populate({
            path: 'products.product',
            populate: { path: 'discount' }
        });

        if (!order) {
            return res.json({
                fulfillmentText: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #${orderId}. Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua s·ªë ƒëi·ªán tho·∫°i 0382385129.`
            });
        }

        if (wantsEmail) {
            if (!emailToUse) {
                // N·∫øu kh√¥ng c√≥ email, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p v√† l∆∞u context ch·ªù email
                const outputContexts = [{
                    name: `${req.body.session}/contexts/waiting_for_email_context`,
                    lifespanCount: 5,
                    parameters: {
                        orderId: order._id
                    }
                }];
                return res.json({
                    fulfillmentText: 'üìß Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n h√≥a ƒë∆°n.',
                    outputContexts: outputContexts
                });
            }

            // C·∫≠p nh·∫≠t email v√†o ƒë∆°n h√†ng n·∫øu c·∫ßn
            if (emailToUse !== order.email) {
                order.email = emailToUse;
                await order.save();
            }

            // T·∫°o n·ªôi dung h√≥a ƒë∆°n
            const product = order.products[0].product;
            const productInfo = {
                name: product.name,
                price: order.products[0].price,
                discount: product.discount
            };
            const invoiceContent = generateInvoiceContent(order, productInfo);

            // G·ª≠i email v·ªõi tham s·ªë r√µ r√†ng
            await sendEmail({
                email: emailToUse,
                subject: 'H√≥a ƒë∆°n mua h√†ng t·ª´ c·ª≠a h√†ng gi√†y',
                html: invoiceContent
            });

            // X√≥a session sau khi ho√†n t·∫•t
            delete req.session.order;
            delete req.session.selectedProduct;

            return res.json({
                fulfillmentText: `‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!\nüìß H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${emailToUse}.\nüíå C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!`
            });
        } else {
            // Kh√¥ng mu·ªën nh·∫≠n email
            delete req.session.order;
            delete req.session.selectedProduct;

            return res.json({
                fulfillmentText: `‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!\nüíå C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá s·ªõm ƒë·ªÉ x√°c nh·∫≠n.`
            });
        }
    } catch (error) {
        console.error('Order confirmation error:', error);
        return res.json({
            fulfillmentText: `‚ö†Ô∏è Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: ${error.message}. Vui l√≤ng li√™n h·ªá 0382385129 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`
        });
    }
}

// X·ª≠ l√Ω email ƒë∆∞·ª£c cung c·∫•p sau khi y√™u c·∫ßu
async function handleLateEmail(parameters, req, res) {
    const { email } = parameters;

    console.log('Late email parameters:', email);

    const waitingForEmailContext = req.body.queryResult.outputContexts.find(
        context => context.name.includes('waiting_for_email_context')
    );

    if (!waitingForEmailContext || !waitingForEmailContext.parameters.orderId) {
        return res.json({
            fulfillmentText: 'Xin l·ªói, kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email. Vui l√≤ng li√™n h·ªá 0382385129.'
        });
    }

    const orderId = waitingForEmailContext.parameters.orderId;

    if (!email || !email.includes('@') || !email.includes('.')) {
        return res.json({
            fulfillmentText: 'ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p email ch√≠nh x√°c.'
        });
    }

    try {
        const order = await Order.findById(orderId).populate({
            path: 'products.product',
            populate: { path: 'discount' }
        });

        if (!order) {
            return res.json({
                fulfillmentText: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #${orderId}. Vui l√≤ng li√™n h·ªá 0382385129.`
            });
        }

        order.email = email;
        await order.save();

        const product = order.products[0].product;
        const productInfo = {
            name: product.name,
            price: order.products[0].price,
            discount: product.discount
        };
        const invoiceContent = generateInvoiceContent(order, productInfo);
        console.log({ "invoiceContent": invoiceContent });

        await sendEmail(email, 'H√≥a ƒë∆°n mua h√†ng t·ª´ c·ª≠a h√†ng gi√†y', invoiceContent);

        delete req.session.order;
        delete req.session.selectedProduct;

        return res.json({
            fulfillmentText: `‚úÖ H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}.\nüíå C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!`
        });
    } catch (error) {
        console.error('Late email error:', error);
        return res.json({
            fulfillmentText: `‚ö†Ô∏è L·ªói khi g·ª≠i email: ${error.message}. Vui l√≤ng li√™n h·ªá 0382385129 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`
        });
    }
}

// X·ª≠ l√Ω t√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
async function handleProductByBrand(parameters, req, res) {
    const { brand } = parameters;
    try {
        const products = await Product.find({ brand: { $regex: brand, $options: 'i' } })
            .populate('category')
            .populate('discount')
            .limit(5);

        return handleProductResults(products, `th∆∞∆°ng hi·ªáu ${brand}`, req, res);
    } catch (error) {
        console.error('Brand search error:', error);
        return handleError(res);
    }
}

// H√†m h·ªó tr·ª£ x·ª≠ l√Ω k·∫øt qu·∫£ s·∫£n ph·∫©m
function handleProductResults(products, searchCriteria, req, res) {
    if (products.length === 0) {
        return res.json({
            fulfillmentText: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o v·ªõi ${searchCriteria}.`
        });
    }

    const productList = products.map((p, index) => {
        const discountedPrice = p.discount
            ? p.price * (1 - p.discount.amount / 100)
            : p.price;
        return `${index + 1}. ${p.name}\n` +
            `   üí∞ Gi√°: ${p.price.toLocaleString('vi-VN')} VND\n` +
            (p.discount ? `   üè∑Ô∏è Gi·∫£m gi√°: ${p.discount.amount}% c√≤n ${discountedPrice.toLocaleString('vi-VN')} VND\n` : '') +
            `   üìè Size: ${p.sizes.join(', ')}\n` +
            `   üé® M√†u s·∫Øc: ${p.colors.join(', ')}`;
    }).join('\n\n');

    const outputContexts = [{
        name: `${req.body.session}/contexts/product_list_context`,
        lifespanCount: 5,
        parameters: {
            products: products,
            searchCriteria: searchCriteria
        }
    }];

    return res.json({
        fulfillmentText:
            `T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m v·ªõi ${searchCriteria}:\n\n${productList}\n\n` +
            `B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o? H√£y n√≥i "ch·ªçn s·ªë [1-${products.length}]" ho·∫∑c "ch·ªçn [t√™n s·∫£n ph·∫©m]"`,
        outputContexts: outputContexts
    });
}

// H√†m x·ª≠ l√Ω l·ªói
function handleError(res) {
    return res.json({
        fulfillmentText: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.'
    });
}

// H√†m x·ª≠ l√Ω m·∫∑c ƒë·ªãnh
function handleDefaultResponse(req, res) {
    return res.json({
        fulfillmentText: 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c h·ªèi theo c√°ch kh√°c.'
    });
}

export default ChatbotController;